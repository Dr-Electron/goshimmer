// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/vote/net/query.proto

package net

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryRequest struct {
	ConflictIDs          []string `protobuf:"bytes,1,rep,name=conflictIDs,proto3" json:"conflictIDs,omitempty"`
	TimestampIDs         []string `protobuf:"bytes,2,rep,name=timestampIDs,proto3" json:"timestampIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eff5e7e8623d680f, []int{0}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetConflictIDs() []string {
	if m != nil {
		return m.ConflictIDs
	}
	return nil
}

func (m *QueryRequest) GetTimestampIDs() []string {
	if m != nil {
		return m.TimestampIDs
	}
	return nil
}

type QueryReply struct {
	Opinion              []int32  `protobuf:"varint,1,rep,packed,name=opinion,proto3" json:"opinion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryReply) Reset()         { *m = QueryReply{} }
func (m *QueryReply) String() string { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()    {}
func (*QueryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_eff5e7e8623d680f, []int{1}
}

func (m *QueryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryReply.Unmarshal(m, b)
}
func (m *QueryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryReply.Marshal(b, m, deterministic)
}
func (m *QueryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReply.Merge(m, src)
}
func (m *QueryReply) XXX_Size() int {
	return xxx_messageInfo_QueryReply.Size(m)
}
func (m *QueryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReply proto.InternalMessageInfo

func (m *QueryReply) GetOpinion() []int32 {
	if m != nil {
		return m.Opinion
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "net.QueryRequest")
	proto.RegisterType((*QueryReply)(nil), "net.QueryReply")
}

func init() { proto.RegisterFile("packages/vote/net/query.proto", fileDescriptor_eff5e7e8623d680f) }

var fileDescriptor_eff5e7e8623d680f = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x48, 0x4c, 0xce,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x2f, 0xcb, 0x2f, 0x49, 0xd5, 0xcf, 0x4b, 0x2d, 0xd1, 0x2f, 0x2c,
	0x4d, 0x2d, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x4b, 0x2d, 0x51, 0x0a,
	0xe1, 0xe2, 0x09, 0x04, 0x89, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x29, 0x70, 0x71,
	0x27, 0xe7, 0xe7, 0xa5, 0xe5, 0x64, 0x26, 0x97, 0x78, 0xba, 0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6b,
	0x70, 0x06, 0x21, 0x0b, 0x09, 0x29, 0x71, 0xf1, 0x94, 0x64, 0xe6, 0xa6, 0x16, 0x97, 0x24, 0xe6,
	0x16, 0x80, 0x94, 0x30, 0x81, 0x95, 0xa0, 0x88, 0x29, 0xa9, 0x71, 0x71, 0x41, 0x4d, 0x2d, 0xc8,
	0xa9, 0x14, 0x92, 0xe0, 0x62, 0xcf, 0x2f, 0xc8, 0xcc, 0xcb, 0xcc, 0xcf, 0x03, 0x9b, 0xc7, 0x1a,
	0x04, 0xe3, 0x1a, 0xd9, 0x72, 0x71, 0x85, 0xe5, 0x97, 0xa4, 0x16, 0x81, 0x15, 0x0b, 0xe9, 0x73,
	0xb1, 0xfb, 0x43, 0x24, 0x84, 0x04, 0xf5, 0xf2, 0x52, 0x4b, 0xf4, 0x90, 0x5d, 0x26, 0xc5, 0x8f,
	0x2c, 0x54, 0x90, 0x53, 0xa9, 0xc4, 0xe0, 0xc4, 0x1e, 0xc5, 0xaa, 0x67, 0x9d, 0x97, 0x5a, 0x92,
	0xc4, 0x06, 0xf6, 0x91, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x25, 0x62, 0x44, 0x28, 0xf2, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VoterQueryClient is the client API for VoterQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VoterQueryClient interface {
	Opinion(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
}

type voterQueryClient struct {
	cc *grpc.ClientConn
}

func NewVoterQueryClient(cc *grpc.ClientConn) VoterQueryClient {
	return &voterQueryClient{cc}
}

func (c *voterQueryClient) Opinion(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/net.VoterQuery/Opinion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoterQueryServer is the server API for VoterQuery service.
type VoterQueryServer interface {
	Opinion(context.Context, *QueryRequest) (*QueryReply, error)
}

// UnimplementedVoterQueryServer can be embedded to have forward compatible implementations.
type UnimplementedVoterQueryServer struct {
}

func (*UnimplementedVoterQueryServer) Opinion(ctx context.Context, req *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Opinion not implemented")
}

func RegisterVoterQueryServer(s *grpc.Server, srv VoterQueryServer) {
	s.RegisterService(&_VoterQuery_serviceDesc, srv)
}

func _VoterQuery_Opinion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoterQueryServer).Opinion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.VoterQuery/Opinion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoterQueryServer).Opinion(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VoterQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "net.VoterQuery",
	HandlerType: (*VoterQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Opinion",
			Handler:    _VoterQuery_Opinion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packages/vote/net/query.proto",
}
